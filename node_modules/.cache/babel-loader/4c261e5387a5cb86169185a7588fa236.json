{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SimpleCrypto = void 0;\n/**\n * SimpleCryptoJS\n *\n * Simplified AES cryptography for safer and easier encryption and decryption processes\n * of any JavaScript objects.\n **/\n\nvar crypto_js_1 = require(\"crypto-js\");\n/**\n * SimpleCrypto\n *\n * @class\n */\n\n\nvar SimpleCrypto =\n/** @class */\nfunction () {\n  /**\n   * Represent a SimpleCrypto instance\n   *\n   * @constructor\n   * @param\t{string}\tsecret\t\tThe secret key for cryptographic process.\n   */\n  function SimpleCrypto(secret) {\n    if (secret === void 0) {\n      throw new Error(\"SimpleCrypto object MUST BE initialised with a SECRET KEY.\");\n    }\n\n    this._dataBuffer = \"\";\n    this._encoder = crypto_js_1.enc.Utf8;\n    this._secret = crypto_js_1.SHA3(typeof secret === \"string\" ? secret : secret.toString());\n    this._keySize = 256;\n    this._iterations = 100;\n  }\n\n  SimpleCrypto.sanitiseData = function (data) {\n    if (data === void 0 || data === null) {\n      throw new Error(\"There is no data provided. Process halted.\");\n    }\n\n    var sanitised = typeof data === \"object\" ? JSON.stringify(data) : typeof data === \"string\" || typeof data === \"number\" || typeof data === \"boolean\" ? data.toString() : null;\n\n    if (null === sanitised) {\n      throw new Error(\"Invalid data type. Only object, string, number and boolean data types are allowed.\");\n    }\n\n    return sanitised;\n  };\n\n  SimpleCrypto.transform = function (src) {\n    if (src.toLowerCase() === \"true\" || src.toLowerCase() === \"false\") {\n      return src.toLowerCase() === \"true\";\n    }\n\n    try {\n      return JSON.parse(src);\n    } catch (jsonError) {\n      return /^-?[\\d.]+(?:e-?\\d+)?$/.test(src) && !isNaN(parseFloat(src)) ? parseFloat(src) : src;\n    }\n  };\n\n  Object.defineProperty(SimpleCrypto, \"encoders\", {\n    /**\n     * Encoders\n     *\n     * Get Encoder instance available.\n     *\n     * @since\t\t2017.10.16\n     * @access\t\tpublic\n     *\n     * @memberOf    SimpleCrypto\n     *\n     * @see     WordArray\n     *\n     * @return  {object}  Returns object of Encoder instances.\n     */\n    get: function () {\n      return __assign({\n        Default: crypto_js_1.enc.Utf8\n      }, crypto_js_1.enc);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Generate Random\n   *\n   * Generate a random string or WordArray.\n   *\n   * @since\t\t2017.10.16\n   * @access\t\tpublic\n   *\n   * @memberOf    SimpleCrypto\n   *\n   * @see     WordArray\n   *\n   * @param   {number}    length      \t\tThe length of random to be generated.\n   * @param   {boolean}   expectsWordArray\tSet to true to return WordArray instance.\n   * Default is false and return a string.\n   *\n   * @return  {string | WordArray}  Returns a random string or WordArray.\n   */\n\n  SimpleCrypto.generateRandom = function (length, expectsWordArray) {\n    if (length === void 0) {\n      length = 128;\n    }\n\n    if (expectsWordArray === void 0) {\n      expectsWordArray = false;\n    }\n\n    var random = crypto_js_1.lib.WordArray.random(length / 8);\n    return expectsWordArray ? random : random.toString();\n  };\n  /**\n   * Generate Random String\n   *\n   * Generate a random string\n   *\n   * @since\t\t2020.05.09\n   * @access\t\tpublic\n   *\n   * @memberOf    SimpleCrypto\n   *\n   * @see     WordArray\n   *\n   * @param   {number}    length      \t\tThe length of random to be generated.\n   *\n   * @return  {string | WordArray}  Returns a random string.\n   */\n\n\n  SimpleCrypto.generateRandomString = function (length) {\n    if (length === void 0) {\n      length = 128;\n    }\n\n    return SimpleCrypto.generateRandom(length, false);\n  };\n  /**\n   * Generate Random Word Array\n   *\n   * Generate a random WordArray.\n   *\n   * @since\t\t2020.05.09\n   * @access\t\tpublic\n   *\n   * @memberOf    SimpleCrypto\n   *\n   * @see     WordArray\n   *\n   * @param   {number}    length      \t\tThe length of random to be generated.\n   *\n   * @return  {string | WordArray}  Returns a random WordArray.\n   */\n\n\n  SimpleCrypto.generateRandomWordArray = function (length) {\n    if (length === void 0) {\n      length = 128;\n    }\n\n    return SimpleCrypto.generateRandom(length, true);\n  };\n\n  SimpleCrypto.prototype._decrypt = function () {\n    if (this._dataBuffer.length <= 64) {\n      throw new Error(\"Invalid cipher text. Decryption halted.\");\n    }\n\n    var salt = crypto_js_1.enc.Hex.parse(this._dataBuffer.substr(0, 32));\n    var initialVector = crypto_js_1.enc.Hex.parse(this._dataBuffer.substr(32, 32));\n\n    var encrypted = this._dataBuffer.substring(64, this._dataBuffer.length - 64);\n\n    var key = crypto_js_1.PBKDF2(this._secret.toString(), salt, {\n      keySize: this._keySize / 32,\n      iterations: this._iterations\n    });\n\n    var hashedCipherText = this._dataBuffer.substring(this._dataBuffer.length - 64);\n\n    var cipherText = this._dataBuffer.substring(0, this._dataBuffer.length - 64);\n\n    if (hashedCipherText != crypto_js_1.HmacSHA256(cipherText, key).toString()) {\n      throw new Error(\"Invalid encrypted text received. Decryption halted.\");\n    }\n\n    var decrypted = crypto_js_1.AES.decrypt(encrypted, key, {\n      iv: initialVector,\n      padding: crypto_js_1.pad.Pkcs7,\n      mode: crypto_js_1.mode.CBC\n    });\n    return SimpleCrypto.transform(decrypted.toString(SimpleCrypto.encoders.Default));\n  };\n\n  SimpleCrypto.prototype._encrypt = function () {\n    var salt = SimpleCrypto.generateRandom(128, true);\n    var initialVector = SimpleCrypto.generateRandom(128, true);\n    var key = crypto_js_1.PBKDF2(this._secret.toString(), salt, {\n      keySize: this._keySize / 32,\n      iterations: this._iterations\n    });\n    var encrypted = crypto_js_1.AES.encrypt(this._dataBuffer, key, {\n      iv: initialVector,\n      padding: crypto_js_1.pad.Pkcs7,\n      mode: crypto_js_1.mode.CBC\n    }); // Combining the encrypted string with salt and IV to form cipher-text\n\n    var cipherText = salt.toString() + initialVector.toString() + encrypted.toString(); // Generate authentication tag and append that to the cipher-text using the key derived from PBKDF2.\n    // (Optional TODO: Include a module to generate authentication key. Possibly HKDF-SHA256.)\n\n    var hashedCipherText = crypto_js_1.HmacSHA256(cipherText, key).toString();\n    return cipherText + hashedCipherText;\n  };\n\n  SimpleCrypto.prototype.decrypt = function (cipher, secondArg, thirdArg) {\n    var _this = this;\n\n    var setDecryptionOption = function (arg) {\n      if (typeof arg !== \"boolean\") _this.setEncoder(arg);\n    };\n\n    try {\n      if (cipher !== void 0) {\n        this.update(cipher);\n      }\n\n      if (secondArg !== void 0) {\n        setDecryptionOption(secondArg);\n      }\n\n      if (thirdArg !== void 0) {\n        setDecryptionOption(thirdArg);\n      }\n\n      return this._decrypt();\n    } catch (error) {\n      throw error;\n    }\n  };\n\n  SimpleCrypto.prototype.encrypt = function (data) {\n    try {\n      if (data !== void 0) {\n        this.update(data);\n      }\n\n      return this._encrypt();\n    } catch (error) {\n      throw error;\n    }\n  };\n  /**\n   * Decrypt Object\n   *\n   * Decrypt a encrypted string and try to convert it back to object.\n   *\n   * @since\t\t2017.10.16\n   * @access\t\tpublic\n   * @deprecated\tSince version 2.0.0, use decrypt(cipher: CipherText) instead.\n   *\n   * @memberOf    SimpleCrypto\n   *\n   * @see\t\tdecrypt\n   *\n   * @param   {string}\tcipher\t\tThe encrypted string of the data.\n   *\n   * @return  {string}\tThe decrypted data of the encrypted string in the form\n   * of object.\n   */\n\n\n  SimpleCrypto.prototype.decryptObject = function (cipher) {\n    return this.update(cipher).decrypt();\n  };\n  /**\n   * Encrypt Object\n   *\n   * Encrypt an object.\n   *\n   * @since\t\t2017.10.16\n   * @access\t\tpublic\n   * @deprecated\tSince version 2.0.0, use encrypt(data: PlainData) instead.\n   *\n   * @memberOf    SimpleCrypto\n   *\n   * @see\t\tencrypt\n   *\n   * @param   {object}\tobject\t\tThe object to be encrypted.\n   *\n   * @return  {string}\tThe encrypted string of the object.\n   */\n\n\n  SimpleCrypto.prototype.encryptObject = function (object) {\n    return this.update(object).encrypt();\n  };\n  /**\n   * Append\n   *\n   * Append the data to be encrypted or decrypted.\n   *\n   * @since\t\t2020.05.09\n   * @access\t\tpublic\n   *\n   * @memberOf    SimpleCrypto\n   *\n   * @param   {object | string | number | boolean}\tdata\tData to be encrypted or decrypted.\n   *\n   * @return  {SimpleCrypto}\t\tCurrent SimpleCrypto instance.\n   */\n\n\n  SimpleCrypto.prototype.append = function (data) {\n    try {\n      this._dataBuffer = this._dataBuffer + SimpleCrypto.sanitiseData(data);\n      return this;\n    } catch (error) {\n      throw error;\n    }\n  };\n  /**\n   * Update\n   *\n   * Change data to be encrypted or decrypted.\n   *\n   * @since\t\t2020.05.09\n   * @access\t\tpublic\n   *\n   * @memberOf    SimpleCrypto\n   *\n   * @param   {object | string | number | boolean}\tdata\tData to be encrypted or decrypted.\n   *\n   * @return  {SimpleCrypto}\t\tCurrent SimpleCrypto instance.\n   */\n\n\n  SimpleCrypto.prototype.update = function (data) {\n    try {\n      this._dataBuffer = SimpleCrypto.sanitiseData(data);\n      return this;\n    } catch (error) {\n      throw error;\n    }\n  };\n  /**\n   * Set Encoder\n   *\n   * Change the default encoding type for the decryption process.\n   *\n   * @since\t\t2020.05.09\n   * @access\t\tpublic\n   *\n   * @memberOf    SimpleCrypto\n   *\n   * @param   {Encoder}\tencoder\t\tThe new Encoder object.\n   *\n   * @return  {SimpleCrypto}\t\tCurrent SimpleCrypto instance.\n   */\n\n\n  SimpleCrypto.prototype.setEncoder = function (encoder) {\n    /*\n    * TODO: Encoding support is dropped at the moment, both for encryption\n    *  and decryption. We should figure out how we have to implement encoding\n    *  support in the simplest way possible.\n    * */\n    this._encoder = encoder;\n    return this;\n  };\n  /**\n   * Set Secret\n   *\n   * Change the secret key by setting a new one. By changing the secret key,\n   * any encrypted string that encrypted by previous secret key will not be\n   * able to decrypted, unless the secret key is set to the one used to\n   * encrypt the data.\n   *\n   * @since\t\t2017.10.16\n   * @access\t\tpublic\n   *\n   * @memberOf    SimpleCrypto\n   *\n   * @param   {string}\tsecret\t\tThe new secret key as string.\n   *\n   * @return  {SimpleCrypto}\t\tCurrent SimpleCrypto instance.\n   */\n\n\n  SimpleCrypto.prototype.setSecret = function (secret) {\n    this._secret = crypto_js_1.SHA3(typeof secret === \"string\" ? secret : secret.toString());\n    return this;\n  };\n\n  return SimpleCrypto;\n}();\n\nexports.SimpleCrypto = SimpleCrypto;\nexports.default = SimpleCrypto;","map":{"version":3,"sources":["../src/SimpleCrypto.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SimpleCrypto = void 0;\n/**\n * SimpleCryptoJS\n *\n * Simplified AES cryptography for safer and easier encryption and decryption processes\n * of any JavaScript objects.\n **/\nvar crypto_js_1 = require(\"crypto-js\");\n/**\n * SimpleCrypto\n *\n * @class\n */\nvar SimpleCrypto = /** @class */ (function () {\n    /**\n     * Represent a SimpleCrypto instance\n     *\n     * @constructor\n     * @param\t{string}\tsecret\t\tThe secret key for cryptographic process.\n     */\n    function SimpleCrypto(secret) {\n        if (secret === void 0) {\n            throw new Error(\"SimpleCrypto object MUST BE initialised with a SECRET KEY.\");\n        }\n        this._dataBuffer = \"\";\n        this._encoder = crypto_js_1.enc.Utf8;\n        this._secret = crypto_js_1.SHA3(typeof secret === \"string\" ? secret : secret.toString());\n        this._keySize = 256;\n        this._iterations = 100;\n    }\n    SimpleCrypto.sanitiseData = function (data) {\n        if (data === void 0 || data === null) {\n            throw new Error(\"There is no data provided. Process halted.\");\n        }\n        var sanitised = typeof data === \"object\"\n            ? JSON.stringify(data)\n            : typeof data === \"string\" || typeof data === \"number\" || typeof data === \"boolean\"\n                ? data.toString()\n                : null;\n        if (null === sanitised) {\n            throw new Error(\"Invalid data type. Only object, string, number and boolean data types are allowed.\");\n        }\n        return sanitised;\n    };\n    SimpleCrypto.transform = function (src) {\n        if (src.toLowerCase() === \"true\" || src.toLowerCase() === \"false\") {\n            return src.toLowerCase() === \"true\";\n        }\n        try {\n            return JSON.parse(src);\n        }\n        catch (jsonError) {\n            return /^-?[\\d.]+(?:e-?\\d+)?$/.test(src) && !isNaN(parseFloat(src)) ? parseFloat(src) : src;\n        }\n    };\n    Object.defineProperty(SimpleCrypto, \"encoders\", {\n        /**\n         * Encoders\n         *\n         * Get Encoder instance available.\n         *\n         * @since\t\t2017.10.16\n         * @access\t\tpublic\n         *\n         * @memberOf    SimpleCrypto\n         *\n         * @see     WordArray\n         *\n         * @return  {object}  Returns object of Encoder instances.\n         */\n        get: function () {\n            return __assign({ Default: crypto_js_1.enc.Utf8 }, crypto_js_1.enc);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Generate Random\n     *\n     * Generate a random string or WordArray.\n     *\n     * @since\t\t2017.10.16\n     * @access\t\tpublic\n     *\n     * @memberOf    SimpleCrypto\n     *\n     * @see     WordArray\n     *\n     * @param   {number}    length      \t\tThe length of random to be generated.\n     * @param   {boolean}   expectsWordArray\tSet to true to return WordArray instance.\n     * Default is false and return a string.\n     *\n     * @return  {string | WordArray}  Returns a random string or WordArray.\n     */\n    SimpleCrypto.generateRandom = function (length, expectsWordArray) {\n        if (length === void 0) { length = 128; }\n        if (expectsWordArray === void 0) { expectsWordArray = false; }\n        var random = crypto_js_1.lib.WordArray.random(length / 8);\n        return expectsWordArray ? random : random.toString();\n    };\n    /**\n     * Generate Random String\n     *\n     * Generate a random string\n     *\n     * @since\t\t2020.05.09\n     * @access\t\tpublic\n     *\n     * @memberOf    SimpleCrypto\n     *\n     * @see     WordArray\n     *\n     * @param   {number}    length      \t\tThe length of random to be generated.\n     *\n     * @return  {string | WordArray}  Returns a random string.\n     */\n    SimpleCrypto.generateRandomString = function (length) {\n        if (length === void 0) { length = 128; }\n        return SimpleCrypto.generateRandom(length, false);\n    };\n    /**\n     * Generate Random Word Array\n     *\n     * Generate a random WordArray.\n     *\n     * @since\t\t2020.05.09\n     * @access\t\tpublic\n     *\n     * @memberOf    SimpleCrypto\n     *\n     * @see     WordArray\n     *\n     * @param   {number}    length      \t\tThe length of random to be generated.\n     *\n     * @return  {string | WordArray}  Returns a random WordArray.\n     */\n    SimpleCrypto.generateRandomWordArray = function (length) {\n        if (length === void 0) { length = 128; }\n        return SimpleCrypto.generateRandom(length, true);\n    };\n    SimpleCrypto.prototype._decrypt = function () {\n        if (this._dataBuffer.length <= 64) {\n            throw new Error(\"Invalid cipher text. Decryption halted.\");\n        }\n        var salt = crypto_js_1.enc.Hex.parse(this._dataBuffer.substr(0, 32));\n        var initialVector = crypto_js_1.enc.Hex.parse(this._dataBuffer.substr(32, 32));\n        var encrypted = this._dataBuffer.substring(64, this._dataBuffer.length - 64);\n        var key = crypto_js_1.PBKDF2(this._secret.toString(), salt, {\n            keySize: this._keySize / 32,\n            iterations: this._iterations\n        });\n        var hashedCipherText = this._dataBuffer.substring(this._dataBuffer.length - 64);\n        var cipherText = this._dataBuffer.substring(0, this._dataBuffer.length - 64);\n        if (hashedCipherText != crypto_js_1.HmacSHA256(cipherText, key).toString()) {\n            throw new Error(\"Invalid encrypted text received. Decryption halted.\");\n        }\n        var decrypted = crypto_js_1.AES.decrypt(encrypted, key, {\n            iv: initialVector,\n            padding: crypto_js_1.pad.Pkcs7,\n            mode: crypto_js_1.mode.CBC\n        });\n        return SimpleCrypto.transform(decrypted.toString(SimpleCrypto.encoders.Default));\n    };\n    SimpleCrypto.prototype._encrypt = function () {\n        var salt = SimpleCrypto.generateRandom(128, true);\n        var initialVector = SimpleCrypto.generateRandom(128, true);\n        var key = crypto_js_1.PBKDF2(this._secret.toString(), salt, {\n            keySize: this._keySize / 32,\n            iterations: this._iterations\n        });\n        var encrypted = crypto_js_1.AES.encrypt(this._dataBuffer, key, {\n            iv: initialVector,\n            padding: crypto_js_1.pad.Pkcs7,\n            mode: crypto_js_1.mode.CBC\n        });\n        // Combining the encrypted string with salt and IV to form cipher-text\n        var cipherText = salt.toString()\n            + initialVector.toString()\n            + encrypted.toString();\n        // Generate authentication tag and append that to the cipher-text using the key derived from PBKDF2.\n        // (Optional TODO: Include a module to generate authentication key. Possibly HKDF-SHA256.)\n        var hashedCipherText = crypto_js_1.HmacSHA256(cipherText, key).toString();\n        return cipherText + hashedCipherText;\n    };\n    SimpleCrypto.prototype.decrypt = function (cipher, secondArg, thirdArg) {\n        var _this = this;\n        var setDecryptionOption = function (arg) {\n            if (typeof arg !== \"boolean\")\n                _this.setEncoder(arg);\n        };\n        try {\n            if (cipher !== void 0) {\n                this.update(cipher);\n            }\n            if (secondArg !== void 0) {\n                setDecryptionOption(secondArg);\n            }\n            if (thirdArg !== void 0) {\n                setDecryptionOption(thirdArg);\n            }\n            return this._decrypt();\n        }\n        catch (error) {\n            throw error;\n        }\n    };\n    SimpleCrypto.prototype.encrypt = function (data) {\n        try {\n            if (data !== void 0) {\n                this.update(data);\n            }\n            return this._encrypt();\n        }\n        catch (error) {\n            throw error;\n        }\n    };\n    /**\n     * Decrypt Object\n     *\n     * Decrypt a encrypted string and try to convert it back to object.\n     *\n     * @since\t\t2017.10.16\n     * @access\t\tpublic\n     * @deprecated\tSince version 2.0.0, use decrypt(cipher: CipherText) instead.\n     *\n     * @memberOf    SimpleCrypto\n     *\n     * @see\t\tdecrypt\n     *\n     * @param   {string}\tcipher\t\tThe encrypted string of the data.\n     *\n     * @return  {string}\tThe decrypted data of the encrypted string in the form\n     * of object.\n     */\n    SimpleCrypto.prototype.decryptObject = function (cipher) {\n        return this.update(cipher).decrypt();\n    };\n    /**\n     * Encrypt Object\n     *\n     * Encrypt an object.\n     *\n     * @since\t\t2017.10.16\n     * @access\t\tpublic\n     * @deprecated\tSince version 2.0.0, use encrypt(data: PlainData) instead.\n     *\n     * @memberOf    SimpleCrypto\n     *\n     * @see\t\tencrypt\n     *\n     * @param   {object}\tobject\t\tThe object to be encrypted.\n     *\n     * @return  {string}\tThe encrypted string of the object.\n     */\n    SimpleCrypto.prototype.encryptObject = function (object) {\n        return this.update(object).encrypt();\n    };\n    /**\n     * Append\n     *\n     * Append the data to be encrypted or decrypted.\n     *\n     * @since\t\t2020.05.09\n     * @access\t\tpublic\n     *\n     * @memberOf    SimpleCrypto\n     *\n     * @param   {object | string | number | boolean}\tdata\tData to be encrypted or decrypted.\n     *\n     * @return  {SimpleCrypto}\t\tCurrent SimpleCrypto instance.\n     */\n    SimpleCrypto.prototype.append = function (data) {\n        try {\n            this._dataBuffer = this._dataBuffer + SimpleCrypto.sanitiseData(data);\n            return this;\n        }\n        catch (error) {\n            throw error;\n        }\n    };\n    /**\n     * Update\n     *\n     * Change data to be encrypted or decrypted.\n     *\n     * @since\t\t2020.05.09\n     * @access\t\tpublic\n     *\n     * @memberOf    SimpleCrypto\n     *\n     * @param   {object | string | number | boolean}\tdata\tData to be encrypted or decrypted.\n     *\n     * @return  {SimpleCrypto}\t\tCurrent SimpleCrypto instance.\n     */\n    SimpleCrypto.prototype.update = function (data) {\n        try {\n            this._dataBuffer = SimpleCrypto.sanitiseData(data);\n            return this;\n        }\n        catch (error) {\n            throw error;\n        }\n    };\n    /**\n     * Set Encoder\n     *\n     * Change the default encoding type for the decryption process.\n     *\n     * @since\t\t2020.05.09\n     * @access\t\tpublic\n     *\n     * @memberOf    SimpleCrypto\n     *\n     * @param   {Encoder}\tencoder\t\tThe new Encoder object.\n     *\n     * @return  {SimpleCrypto}\t\tCurrent SimpleCrypto instance.\n     */\n    SimpleCrypto.prototype.setEncoder = function (encoder) {\n        /*\n        * TODO: Encoding support is dropped at the moment, both for encryption\n        *  and decryption. We should figure out how we have to implement encoding\n        *  support in the simplest way possible.\n        * */\n        this._encoder = encoder;\n        return this;\n    };\n    /**\n     * Set Secret\n     *\n     * Change the secret key by setting a new one. By changing the secret key,\n     * any encrypted string that encrypted by previous secret key will not be\n     * able to decrypted, unless the secret key is set to the one used to\n     * encrypt the data.\n     *\n     * @since\t\t2017.10.16\n     * @access\t\tpublic\n     *\n     * @memberOf    SimpleCrypto\n     *\n     * @param   {string}\tsecret\t\tThe new secret key as string.\n     *\n     * @return  {SimpleCrypto}\t\tCurrent SimpleCrypto instance.\n     */\n    SimpleCrypto.prototype.setSecret = function (secret) {\n        this._secret = crypto_js_1.SHA3(typeof secret === \"string\" ? secret : secret.toString());\n        return this;\n    };\n    return SimpleCrypto;\n}());\nexports.SimpleCrypto = SimpleCrypto;\nexports.default = SimpleCrypto;\n//# sourceMappingURL=SimpleCrypto.js.map"]},"metadata":{},"sourceType":"script"}